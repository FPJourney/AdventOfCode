/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day1

import kotlin.io.path.Path
import kotlin.io.path.readLines
import kotlin.math.abs

class App {
    val greeting: String
        get() {
            return "Hello AdventOfCode 2024!"
        }
}

fun main() {
    println(App().greeting)
    val (left, right) = Path("day1/Input.txt").readLines()
        .map { line: String ->
            //what I did + destructuring
            val (leftNum, rightNum) = line.split("   ")
            leftNum.toInt() to rightNum.toInt()
            // livestream version
//            val leftColumn = line.substringBefore(" ").toInt()
//            val rightColumn = line.substringAfterLast(" ").toInt()
//            leftColumn to rightColumn
        }.unzip()
        .let { Pair(it.first.sorted(), it.second.sorted()) }
    println(calculateDistancesBetween(left, right).sum())
    //part 2
    val appearances = countAppearances(left, right)
    println(calculateSimilarityScore(left, appearances))
    //adapted Kotlin Livestream version
    left.foldIndexed(0) { i, acc, n -> acc + n * appearances[i] }.also(::println)
}

fun calculateDistancesBetween(leftColumn: List<Int>, rightColumn: List<Int>): List<Int> =
    leftColumn.zip(rightColumn) { a, b -> abs(b - a) }

fun countAppearances(leftColumn: List<Int>, rightColumn: List<Int>): List<Int> =
    leftColumn.map { n1 -> rightColumn.count { n2 -> n2 == n1 } }

fun countAppearancesKotlinLivestream(rightColumn: List<Int>): Map<Int, Int> =
    //rightColumn.groupBy { it }.mapValues { it.values.size } // less efficient because it creates intermediate map
    rightColumn.groupingBy { it }.eachCount()

fun calculateSimilarityScore(leftColumn: List<Int>, appearances: List<Int>): Int =
    leftColumn.zip(appearances) { a, b -> a * b }.sum()